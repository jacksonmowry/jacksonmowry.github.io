#+title: Notes
* File Descriptors
| fd | common name | buffering  |
|----+-------------+------------|
|  0 | stdin       |            |
|  1 | stdout      | buffered   |
|  2 | stderr      | unbuffered |
* printf
#+begin_src
#include <stdio.h>

int main() {
printf
}
#+end_src
* scanf

* strings
| len(src) < n | pad with 0's to end |
| len(src) > n | copy n bytes, no \0 |
|              |                     |
|              |                     |

#+begin_src C
#include <stdio.h>
typedef struct test {
    char a[6];
} test;
int main() {
    printf("%d\n", _Alignof(char[6]));
}
#+end_src

#+RESULTS:
: 1

| Monday          | Tuesday         | Wednesday | Thursday      | Friday          |
|-----------------+-----------------+-----------+---------------+-----------------|
| 10:10am-11:20am | 11:00am-12:30pm | In lab    | 11:00-12:30pm | 10:10am-11:20am |
| 1hr             | 1.5hr           | 1hr       | 1.5hr         | 1hr             |
| 12:45pm-2:45pm  |                 |           |               | 12:45pm-2:45pm  |
| 2hr             |                 |           |               | 2hr             |

#+begin_src C
bool check(char* board, int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            board[(i*size)+j];
        }
    }
}

int main() {
    int size = 5;
    char board[size][size];
}
#+end_src

#+begin_src C :results verbatim
#include <stdio.h>
#include <stdlib.h>

int main() {
    int i = 0;
    int* j = malloc(sizeof(int));
    *j = 1;

    printf("i is at memory address %p\n", &i);
    printf("j is at memory address %p\n", j);

    printf("i and j are %d bytes apart\n", (char*)&i - (char*)j);
}
#+end_src

#+RESULTS:
: i is at memory address 0x7fff7434496c
: j is at memory address 0x572d115b0330
: i and j are 1658406460 bytes apart
