#+title: Notes
* File Descriptors
| fd | common name | buffering  |
|----+-------------+------------|
|  0 | stdin       |            |
|  1 | stdout      | buffered   |
|  2 | stderr      | unbuffered |
* printf
#+begin_src
#include <stdio.h>

int main() {
printf
}
#+end_src
* scanf

* strings
| len(src) < n | pad with 0's to end |
| len(src) > n | copy n bytes, no \0 |
|              |                     |
|              |                     |

#+begin_src C
#include <stdio.h>
typedef struct test {
    char a[6];
} test;
int main() {
    printf("%d\n", _Alignof(char[6]));
}
#+end_src

#+RESULTS:
: 1

| Monday          | Tuesday         | Wednesday | Thursday      | Friday          |
|-----------------+-----------------+-----------+---------------+-----------------|
| 10:10am-11:20am | 11:00am-12:30pm | In lab    | 11:00-12:30pm | 10:10am-11:20am |
| 1hr             | 1.5hr           | 1hr       | 1.5hr         | 1hr             |
| 12:45pm-2:45pm  |                 |           |               | 12:45pm-2:45pm  |
| 2hr             |                 |           |               | 2hr             |

#+begin_src C
bool check(char* board, int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            board[(i*size)+j];
        }
    }
}

int main() {
    int size = 5;
    char board[size][size];
}
#+end_src

#+begin_src C :results verbatim
#include <stdio.h>
#include <stdlib.h>

int main() {
    int i = 0;
    int* j = malloc(sizeof(int));
    *j = 1;

    printf("i is at memory address %p\n", &i);
    printf("j is at memory address %p\n", j);

    printf("i and j are %d bytes apart\n", (char*)&i - (char*)j);
}
#+end_src

#+begin_src C
#include <stdio.h>

int main() {
    int array[5];
    array = (int*){0, 0, 0, 0, 0};

    printf("%d\n", array[0]);
}
#+end_src

#+RESULTS:

* mmap
#+begin_src C
void *mmap(void *addr, size_t len, int prot, int flags, int fildes, off_t off);
#+end_src
| Param  | What it is                 | General Value                                                |
|--------+----------------------------+--------------------------------------------------------------|
| addr   | where to map               | NULL                                                         |
| len    | How much                   | sizeof(thing)*number                                         |
| prot   | Protection flags           | PROT_READ or PROT_WRITE or PROT_EXEC (PROT_NONE?)            |
| flags  | Handling of Mapped Data    | MAP_SHARED or MAP_PRIVATE or MAP_ANONYMOUS(no backing store) |
| fd     | -1 (no file) or a valid FD |                                                              |
| offset | How much to offset the ptr | Read +30 bytes into a file                                   |

#+begin_src C
int munmap(void *addr, size_t len);
#+end_src
| Param | What it is                         | General Value                               |
|-------+------------------------------------+---------------------------------------------|
| addr  | Address of the original allocation | Whatever you were handed in the first place |
| size  | The size you allocated             | Whatever it was in the first place          |

#+begin_src C
#include <stdlib.h>
#include <stdio.h>
#include <sys/mman.h>

typedef struct Page {
    union {
        char c[4096];
        int i[4096/4];
        long l[4096/8];
    }u;
};

int main() {

    void* ptr = (NULL, 4096, PROT_READ | PROT_WRITE, MAP_ANONYMOUS | MAP_SHARED, -1, 0);
    if (ptr == MAP_FAILED) {
        perror("mmap");
        return -1;
    }

    Page *p = (page*)ptr;
    p->u.i[0] = 100;

    munmap(ptr, 4096);
}
#+end_src

#+RESULTS:

#+begin_src C :results verbatim
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/mman.h>
#include <unistd.h>
#include <fcntl.h>

int main() {
    int fd;

    fd = open("main.c", O_RDWR);
    if (fd < 0) {
        perror("main.c");
        return -1;
    }

    int size = lseek(fd, 0, SEEK_END);
    lseek(fd, 0, SEEK_SET);

    char* ptr = mmap(NULL, size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
    if (ptr == MAP_FAILED) {
        perror("mmap");
        return -1;
    }

    close(fd);

    ptr[0] = 'V';
    ptr[1] = 'Z';
    printf("%.*s\n", size, ptr);

    munmap(ptr, size);
}

#+end_src

#+RESULTS:
#+begin_example
VZnclude <stdio.h>

int main() {
  int a;
  float b;
  scanf("%d %f\n", &a, &b);

  printf("%d %f\n", a, b);
}

#+end_example

#+begin_src C :results verbatim
#include <sys/mman.h>
#include <stdlib.h>
#include <stdio.h>

int main() {
    void* ptr = mmap(NULL, 4096, PROT_READ | PROT_WRITE, MAP_ANON | MAP_PRIVATE | MAP_STACK, -1, 0);
    if (ptr == MAP_FAILED) {
        perror("mmap");
        return -1;
    }

    int* iptr = (int*)ptr;
    iptr[0] = 1234;
    iptr[1] = 5678;

    printf("%d %d\n", iptr[0], iptr[1]);
    printf("%p\n", iptr);

    munmap(ptr, 4096);
}
#+end_src

#+RESULTS:
: 1234 5678
: 0x7c0829b36000

* POSIX Files
** Open
| Flags    | Description                                |
|----------+--------------------------------------------|
| O_APPEND | Open file in the append mode (for writing) |
| O_CREAT  | Create the file if it doesn't exist        |
| O_EXCL   | Don't create if the file doesn't exist     |
| O_TRUNC  | Truncates the file to size 0 when opened   |
| O_RDONLY | Opens with readonly permissions            |
| O_WRONLY | Opens with writeonly permissions           |
| O_RDWR   | Opens with read and write permissions      |

Mode - an octal mode (if creating the file (required only if =O_CREAT= is used))


#+begin_src C :results verbatim
#include <unistd.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>

int main() {
    int fd = open("john.txt", O_RDONLY);
    if (fd < 0) {
        perror("john.txt");
        return -1;
    }

    lseek(fd, 6, SEEK_SET);

    char buf[256];
    ssize_t ret = read(fd, buf, 5);
    if (ret < 0) {
        perror("read");
        return-1;
    }
    buf[ret] = '\0';
    printf("%lu: %s\n", ret, buf);

    lseek(fd, 0, SEEK_SET);

    ret = read(fd, buf, 5);
    if (ret < 0) {
        perror("read");
        return-1;
    }
    buf[ret] = '\0';
    printf("%lu: %s\n", ret, buf);

    off_t val = lseek(fd, 0, SEEK_CUR);
    printf("we are %ld bytes into the file\n", val);

    close(fd);
}
#+end_src

#+RESULTS:
: 5: World
: 5: Hello
: we are 5 bytes into the file

** Directories
#+begin_src C
DIR* opendir(const char* pathname);
DIR* fdopendir(int fd);
struct dirent* readdir(DIR* dirp);
int closedir(DIR* dirp);

struct dirent {
    ino_t d_ino;
    off_t d_off;
    unsigned short d_reclen;
    unsigned char d_type;
    char d_name[256];
};
#+end_src

#+begin_src C :results verbatim
#include <dirent.h>
#include <sys/stat.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {
    struct stat st;
    DIR* dir;
    struct dirent* dent;

    dir = opendir(".");
    if (!dir) {
        perror("opendir");
        return 1;
    }

    while ((dent = readdir(dir)) != NULL) {
        if (strcmp(dent->d_name, ".") && strcmp(dent->d_name, "..")) {
            printf("%s\n", dent->d_name);
        }
    }

    closedir(dir);
}
    #+end_src

    #+RESULTS:
    #+begin_example
    main.c
    lab1
    lab2
    lab3
    notes.org
    octave-workspace
    mmap.c
    a.out
    john.txt
    ray_tracer
    #+end_example

* Buffered Files
| fopen   |
| fclose  |
| fread   |
| frwite  |
| fseek   |
| ftell   |
| fprintf |
| fscanf  |

#+begin_src C
FILE* fopen(const char* path, const char* mode);
void fclose(FILE* fl);
#+end_src

#+begin_src C :results verbatim
#include <stdio.h>
#include <assert.h>


typedef struct ms {
    int i;
    int j;
    float k;
} ms;

int main(int argc, char* argv[]) {
    ms m = {111,-222,33.5};
    FILE* fp;

    fp = fopen("myfile.bin", "wb");
    if (!fp) {
        perror("myfile.bin");
        return -1;
    }

    size_t bytes_written = fwrite(&m, 1, sizeof(ms), fp);
    if (bytes_written != sizeof(ms)) {
        perror("fwrite");
        return -1;
    }

    printf("I wrote %lu bytes\n", bytes_written);
    printf("Should be %x %x %a\n", m.i, m.j, m.k);

    fclose(fp);

    fp = fopen("myfile.bin", "rb");
    if (!fp) {
        perror("myfile.bin");
        return -1;
    }

    ms s;

    size_t bytes_read = fread(&s, 1, sizeof(ms), fp);
    if (bytes_written != sizeof(ms)) {
        perror("fread");
        return -1;
    }

    int pos = fseek(fp, -4, SEEK_CUR);
    int tell_pos = ftell(fp);
    printf("%d %d\n", pos, tell_pos);
    assert(pos != tell_pos);

    char data;
    bytes_read = fread(&data, 1, 1, fp);

    fclose(fp);

    printf("I read %lu bytes\n", bytes_read);
    printf("s contains %d %d %f", s.i, s.j, s.k);

}
#+end_src

#+RESULTS:
: I wrote 12 bytes
: Should be 6f ffffff22 0x1.0cp+5
: 0 8
: I read 12 bytes
: s contains 111 -222 33.500000

* Text file io
=scanf= stops at whitespace
#+begin_src C :results verbatim
#include <stdio.h>
#include <unistd.h>
#include <sys/stat.h>
#include <string.h>

static size_t mystrcspn(const char* line, const char* rejects) {
    int i = 0;
    for (; line[i]; i++) {
        for (int j = 0; rejects[j]; j++) {
            if (line[i] == rejects[j]) {
                goto out;
            }
        }
    }

out:
    return i;
}

static size_t mystrspn(const char* line, const char* accepts) {
    int i = 0;
    for (; line[i]; i++) {
        for (int j = 0; accepts[j]; j++) {
            if (line[i] != accepts[j]) {
                goto out;
            }
        }
    }

out:
    return i;
}

int main() {
    FILE *fl;

    fl = fopen("somefile.txt", "r");
    int i;
    char buf[256];

    strcpy(buf, "hello world");
    printf("%lu\n", mystrcspn(buf, "\n"));

    while (fgets(buf, sizeof(buf), fl)) {
        size_t pos = mystrcspn(buf, "\r\n");
        buf[pos] = '\0';
        fputs(buf, stdout);
    }

    fclose(fl);
}
    #+end_src

#+RESULTS:
: 11
: Hello World -1333hihihithis

* Dirs again
=opendir=, =readdir=, =closedir=
#+begin_src C :results verbatim
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <sys/stat.h>

int main() {
    char wd[256];

    getcwd(wd, 255);
    strcat(wd, "/test.txt");
    printf("%s\n", wd);

    mkdir("mydir", 0777);
    if (rmdir("mydir") == -1) {
        perror("rmdir");
        return -1;
    }
}
    #+end_src

#+RESULTS:
: /home/jackson/jacksonmowry.github.io/cs360/test.txt

#+begin_src C :results verbatim
#include <stdio.h>
int main() {
    FILE* fd = fopen("test.txt", "r");
    fseek(fd, -7, SEEK_END);
    char buf[256];
    size_t read = fread(buf, 1, 256, fd);
    printf("%zu\n", read);
    buf[read] = '\0';
    printf("%s\n", buf);
    fclose(fd);
}
#+end_src

#+RESULTS:
: 7
: pHDjRK
:

* Multiprocessing
** Introduction
A thread is an execution unit that runs code
- When we run an exe, it is loaded by the operating system
- The thread is that instructions that are running
Nearly all code we've written is single-thread
- Means one execution unit
The is each to write, but with multi-core CPUs, not the best if we need performance
- Multi-core -- run pieces of your code on each core
** Concurrency Parallelism
Concurrency
- Running two or more execution units
- If you only have one CPU, these only run one at a time
Parallelism
- running 2 or more executions at the same time
- if you only have one CPU, parallelism cannot happen
- Parallelism is a specific kind of concurrency
Asynchronous
- the execution of two or more threads are not synchronized (not serialized or not one-after-the-other)
- Threads are concurrent
- Threads may be executed in parallel
- Threads are asynchronous naturally
  - threads have ways to serialize (locking)
** Running a New Program
#+begin_src C :results verbatim
#include <unistd.h>
#include <string.h>
#include <stdio.h>
#include <sys/wait.h>

int main(void) {
    int i = 33;
    pid_t pid;
    int pipes[2];

    pipe(pipes);
    pid = fork();

    if (pid == 0) {
        i = 22;
        printf("Child %d %p\n", i, &i);
        close(pipes[0]);
        write(pipes[1], "hi dad", strlen("hi dad"));
    } else if (pid > 0) {
        close(pipes[1]);
        wait(NULL);
        printf("Parent %d %p\n", i, &i);
        char buf[50];
        read(pipes[0], buf, 50);
        printf("%s\n", buf);
    } else {
        perror("fork");
        return 1;
    }

}
#+end_src

#+RESULTS:
: Child 22 0x7ffc26c01cc0
: Parent 33 0x7ffc26c01cc0
: hi dad

** System Calls
*** =fork()=
Parent gets pid of child
Child gets 0
-1 on error

They run at the same time


Windows doesn't do this, but UNIX style OSes will copy the entire process into the child
*** =wait()=
wait on any child processes
=wait= and =waitpid=
- They may wait on a child
- They are how you must clean up your children

Suspends the parent until at least one child terminates
Puts the status of the termined child into =*wstatus=
- If this is NULL, the status is discarded

=wstatus= is a bit field
- Contains exit status
  - return value from int main()
  - or argument supplied to exit
- Contains the status of the child
  - Did it actually exit?

**** Macros
| WIFEXITED    | true if child terminated normally         |
| WEXITSTATUS  | returns exit status number                |
| WIFSIGNALED  | true if child was terminated by a signal  |
| WTERMSIG     | number of signal that terminated child    |
| WCOREDUMP    | true if child produced a core dump        |
| WIFSTOPPED   | true if child was stopped due to a signal |
| WSTOPSIG     | gives what signal stopped the child       |
| WIFCONTINUED | true if SIGCONT was sent to child         |
*** =exec()=
*** =exit()=
Tell the OS to free all resources, and remove this process from being scheduled
** Pipes
*** =stdin/stdout/stderr=
*** =dup2()=

* Exec
#+begin_src C
int execl(const char* path, const char* arg, ..., /*must pass NULL at the end*/);
int execlp(const char* file, const char* arg, ...);
int execle(const char* file, const char* arg, ...);
int execv(const char* path, char* const argv[]);
int execvp(const char* file, char* const argv[]);
int execvpe(const char* file, char* const argv[], char* const envp[]);
#+end_src

#+begin_src C :results verbatim
#include <unistd.h>
#include <string.h>
#include <stdio.h>
#include <sys/wait.h>
#include <fcntl.h>

int main(int argc, char* argv[]) {
    int i = 33;
    pid_t pid;
    pid = fork();

    if (pid == 0) {
        int fd;
        fd = open("out.txt", O_CREAT|O_TRUNC|O_WRONLY,0666);
        dup2(fd, STDOUT_FILENO);
        char** args;
        args = calloc(argc, sizeof(*args));
        memcpy(args, &argv[1], (argc-1)*sizeof(*argv));
        execvp(args[0], args);
        perror(args[0]);
    } else if (pid > 0) {
    } else {
        perror("fork");
        return 1;
    }
}
    #+end_src

#+RESULTS:

* IPC
** Shared Memory <sys/mman.h>
Interprocess & Intraprocess
- Parent and child can have access to the same location in memory
- shm, creates a "file" that is linked to memory which we can mmap
  - Cannot use fork to accomplish the same thing
*** shm_open
#+begin_src C
#include <sys/mman.h>
int shm_open(const char* name, int oflag, mode_t mode);
int shm_unlink(const char* name);
#+end_src

- Must link rt library =-lrt=
  - =gcc -o shmtest shmtest.c -lrt=
- shm_open creates a shared memory object on the file system
  - can mmap this file descriptor
  - File name starts with a forward slash (e.g./ myshm)
- shm_unlink decrements the reference to the memory object

**** Server
#+begin_src C
#include <stdio.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <unistd.h>

typedef struct Data {
    int a;
    int b;
    int c;
} Data;

int main() {
    int exitcode = 0;
    int fd;
    Data* data;

    fd = shm_open("/myshared.mem", O_CREAT | O_EXCL | O_RDWR, 0666); // Don't need to specify a path, just use a slash
    if (fd < 0) {
        perror("/myshared.mem");
    }

    int code = ftruncate(fd, sizeof(Data));
    if (code == -1) {
        perror("ftruncate");
        exitcode = -1;
        goto cleanup;
    }

    data = (Data*)mmap(NULL, sizeof(Data), PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);
    if (data == MAP_FAILED) {
        perror("mmap");
        exitcode = -1;
        goto cleanup;
    }

    close(fd);

    data->a=-1;
    data->b=22;
    data->c=1234;

    munmap(data, sizeof(Data));

cleanup:
    sleep(5);
    shm_unlink("/myshared.mem");
    return exitcode;
}
#+end_src

#+RESULTS:

**** Client
#+begin_src C
#include <stdio.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <unistd.h>

typedef struct Data {
    int a;
    int b;
    int c;
} Data;

int main() {
    int fd;
    Data* data;

    fd = shm_open("/myshared.mem", O_RDONLY, 0); // Don't need to specify a path, just use a slash
    if (fd < 0) {
        perror("/myshared.mem");
        return -1;
    }

    data = mmap(NULL, sizeof(Data), PROT_READ, MAP_SHARED, fd, 0);
    if (data == MAP_FAILED) {
        perror("mmap");
        return -1;
    }
    close(fd);

    printf("%d %d %d\n", data->a, data->b, data->c);

    munmap(data, sizeof(Data));
}
#+end_src

#+RESULTS:
: -1 22 1234

*** shm_unlink
** Semaphores <semaphore.h>
- Atomic instructions cannot be preempted
-
*** sem_open
*** sem_close
** Message Queues <mqueue.h>
*** mq_open
*** mq_close
** Classic Problems
** Conclusion

* Resource Limits
#+begin_src C
typedef unsigned long rlim_t;

struct rlimit {
    rlim_t rlim_cur;
    rlim_t rlim_max;
};

int setrlimit(int resource, const struct rlimit* rlp);
int getrlimit(int resource, struct rlimit* rlp);
#+end_src

** Returns
0 on success, -1 on failure
** Values
- =rlim_cur= can be lowered and raised, as long as it does not go above =rlim_max=
- =rlim_max= can be lowered only, and can never be raised again
** All the Limits

#+begin_src C :results verbatim
#include <stdio.h>
#include <unistd.h>
#include <sys/resource.h>
#include <time.h>

static void test(void) {
    for (int i = 0; i < 1000000000000000000UL; i++);
}

int main() {
    struct rlimit rl;
    getrlimit(RLIMIT_CPU, &rl);

    printf("%zu %zu\n", rl.rlim_cur, rl.rlim_max);

    rl.rlim_cur = 2;
    setrlimit(RLIMIT_CPU, &rl);

    getrlimit(RLIMIT_CPU, &rl);
    printf("%zu %zu\n", rl.rlim_cur, rl.rlim_max);

    test();
    puts("Finish test.\n");
}
#+end_src

#+RESULTS:

* Pthread
** pthread_mutex
#+begin_src C
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_init(&mutex, NULL);
#+end_src

** Cond Var
- When a thread wants to wait to be given work, it waits on the conditional variable
- Requires a mutex, why?
  - Signal must be atomic
  -

- Acquire the mutex for the cond var
- Wait on the cond var mutex is locked once control is returned to thread
- Unlock after critial seciton is complete

* Producers&Consumers
- Multiple threads and produce data and store into a ringbuffer
- Consumer pops off the ring buffer and does something with it
- Mutex to lock out critial section, cond var

* Signals
- signal.h
** signals
- SIGTERM, terinate
- SIGKILL, force OS to terminate
- SIGSTOP, stop from being scheduled, can result with SIGCONT

These are problems
Primitve form of communication, it /traps/ your program

** Handling Signals
#+begin_src C
#include <signal.h>
signal(int signal, void (*handle)(int signum));
#+end_src

Create a signal handler, a callback function

Just numbers

** Using Constants
use the =#defines=

Mapped to the number =SIGHUP=

#+begin_example
SIGKILL and SIGSTOP canont be captured or redirected by a program
#+end_example

** Default Signals
| SIG_IGN | Ignore a signal          |
| SIG_DFL | Default action (reverts) |
| SIG_ERR | Throw an error for a sig |

** Sending Signals
#+begin_src C
#include <signal.h.>
int raise(int signum);
int kill(int pid, int signum);
#+end_src

Raise a signal on current thread
- Returns 0 on success
Kill raises a signal on a pid
- returns 0 on success

** OS Signals
Most signals are raised by the OS to "signal" errors on conditions
- We only raise() or kill() when necessary
SIGCHLD
- raised by OS with a child process terminates

** Waiting for Signals
#+begin_src C
#include <signal.h>

int pause(void);
#+end_src

We can wait for a signal by pausing the currently executing thread

Does not unpause for ignored signals or unhandled signals

** Scheduling Signals
#+begin_src C
#include <unistd.h>
unsigned int alarm(unsigned int seconds);
#+end_src

Raises SIGALRM within seconds
- if seconds == 0, kills any pending alarms

Returns the number of seconds remaining until any previously scheduled alarm was due to be delivered

** Signal Actions (new(er) signal handlers)
#+begin_src C
#include <signal.h>
int sigactions(int sig, struct sigactions* act, struct sigaction* oact);
struct sigaction {
    __sighandler_t sa_handler;
    __sigset_t sa_mask;
    int sa_flags;
    void (*sa_restorer)(void);
}
#+end_src

*** Notes
- Gives us finer grained control over a signal
- Gives the OS an idea of how to recover after a signal
  - If we get a SIGSEGV, how do we continue (or can we continue)
- sa_flags
  - SA_NOMASK
    - does not add the signal to the process' signal mask of pending signals
  - SA_ONESHOT
    - resets the signal handler to SIG_DFL after receiving a signal
  - SA_STACK
    - stores signal information on an alternative stack

*** Uses
#+begin_src C
#include <signal.h>
#include <stdio.h>

static void handleaction(int sig, siginfo_t* info, void* context) {
    printf("signal %s caught, context %p\n", sig, context);
}

int main() {
    struct sigaction sa;
    int i = 0;
    int j = 22;

    sigemptyset(&sa.sa_mask);
    sa.sa_flags = SA_SIGINFO;
    sa.sa_sigaction = handleaction;

    sigaction(SIGFPE, &sa, NULL);
    printf("%d\n", j/i);
}
#+end_src

#+RESULTS:

** POSIX Signal Functions
| sigalstack  | creates an alternative stack for signal handling       |
| sigemptyset | creates a new set with all signals excluded (empty)    |
| sigfullset  | creates a new set with all signals included (full)     |
| sigaddset   | adds a signal to a signal set                          |
| sigdelset   | deletes a signal from a signal set                     |
| sigismember | checks to see if a signal is part of the signal set    |
| sigpending  | stores the pending signals that haven't been delivered |
| sigprocmask | sets/changes                                           |
| sigpause    | waits for a specified signal                           |

*** sigalstack
#+begin_src C
#include <signal.h>
//              alt stack          old stack
int sigalstack(const stack_t* ss, stack_t* oss);

if ((sigstk.ss_sp = malloc(SIGSTKSZ)) == NULL)
    // error return
sigstk.ss_size = SIGSTKSZ;
sigstk.ss_flags = 0;
if (sigaltstack(&sigstk, (stack_t*)0) < 0)
    perror("sigaltstack");
#+end_src

** Signal Sets (masks)
#+begin_src C
#include <signal.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
int main() {
    struct sigaction sact;

    sigemptyset(&sact.sa_mask);
    sact.sa_flags = 0;
    sact.sa_handler = SIG_IGN;

    sigaction(SIGUSR2, &sact, NULL);

    puts("before kill");
    kill(getpid(), SIGUSR2);
    puts("after kill");
}
#+end_src

#+RESULTS:
| before | kill |
| after  | kill |

#+begin_src C
#include <signal.h>

sigset_t new_set, old_set;
sigemptyset(&new_set);
sigaddset(&new_set, SIGALRM);
sigprocmask(SIG_BLOCK, &new_set, &old_set);
sigprocmask(SIG_SETMASK, &old_set, NULL);
#+end_src

- A masked signal is not heard
- An unmasked signal is heard
  - Empty set hears all signals

** Cleanup Routines
There can be many ways a program exits
- return from main
- exit() call

What if no matter what, we need to clean up?
- atexit()

The atexit function registers a cleanup handler
- void handler(void);

#+begin_src C
#inlucde <stdlib.h>

int atexit(void (*function)(void));

void cleanup() {
    fprintf(stderr, "bye\n");
}

int main() {
    atexit(cleanup);
}
#+end_src

* Reentrant
Can be interrupted without side effects

* Timing
#+begin_src C
#include <time.h>
time_t time(time_t *tloc)

struct tm {
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
};

struct tm* gmtime(const time_t *timep);
struct tm* gmtime_r(const time_t *timep, struct tm* result);

struct tm* localtime(const time_t *timep);
struct tm* localtime_r(const time_t *timep, struct tm* result);

time_t mktime(struct tm* tm);
#+end_src

#+begin_src C :results verbatim
#include <stdio.h>
#include <time.h>
int main() {
    struct tm mytime;
    time_t t;

    t = time(NULL);
    printf("%lu\n", t);

    localtime_r(&t, &mytime);
    printf("%d-%d-%d\n", 1+mytime.tm_mon, mytime.tm_mday, 1900 + mytime.tm_year);

    mytime.tm_year = 1970 - 1900;
    mytime.tm_mon = 0;
    mytime.tm_mday = 1;

    printf("%lu\n", mktime(&mytime));
}
#+end_src

#+RESULTS:
: 1730476295
: 11-1-2024
: 57095

#+begin_src C
#include <time.h>

struct tm tmr;

#+end_src

#+begin_src C
#include <time.h>
char* asctime(const struct tm* tm);
char* asctime_r(const struct tm* tm, char* buf);

char* ctime(const time_t* timep);
char* ctime_r(const struct time_t* timep, char* buf);
#+end_src

#+begin_src C :results verbatim
#include <stdio.h>
#include <time.h>

int main() {
    struct tm mytime;
    time_t t;
    char buf[26];

    t = time(NULL);
    localtime_r(&t, &mytime);

    asctime_r(&mytime, buf);
    printf(buf);

    ctime_r(&t, buf);
    printf(buf);
}
#+end_src

#+RESULTS:
: Fri Nov  1 12:13:34 2024
: Fri Nov  1 12:13:34 2024

** strftime
| Specifier | Description  |
|-----------+--------------|
| %H        | 24 Hour      |
| %l        | 12 Hour      |
| %M        | minutes      |
| %S        | seconds      |
| %P        | AMPM         |
| %p        | ampm         |
| %d        | day of month |
| %m        | month        |
| %y        | 2 digit year |
|           |              |

#+begin_src C
#include <time.h>
#include <stdio.h>

/* size_t strftime(char s[restrict .max], size_t max, */
/*                 const char* restrict format, */
/*                 const struct tm* restrict tm); */

int main() {
    struct tm mytime;
    time_t current;

    current = time(NULL);

    localtime_r(&current,&mytime);
    char output[32];
    strftime(output, 32, "%H %l %d", &mytime);

    printf("%s\n", output);
}
#+end_src

#+RESULTS:
: 11 11 04

* Clock
#+begin_src C :results verbatim
#include <time.h>
#include <stdio.h>

/* clock_t clock(void); */

clock_t st;
clock_t ed;

st = clock();
for (volatile long i = 0; i < 999000000L; i++);
ed = clock();

printf("1 mil for loop took %f ticks.\n", (float)(ed-st)/CLOCKS_PER_SEC);
printf("%lu\n", CLOCKS_PER_SEC);
#+end_src

#+RESULTS:
: 1 mil for loop took 2.772897 ticks.
: 1000000

* Higher-Res Process Times
#+begin_src C
#include <sys/times.h>

struct tms {
    clock_t tms_utime; // user time
    clock_t tms_stime; // system time
    clock_t tms_cutime; // child user time
    clock_t tms_cstime; // child system time
};

clock_t times(struct tms* buf)
#+end_src
Calculates BogoMIPS
#+begin_src C
#include <sys/times.h>
#include <time.h>


#+end_src

#+begin_src C
#include <sys/times.h>

int getitimer(int which, struct itimerval* value);

int setitimer(int which, const struct itimerval* restrict value,
              struct itimerval* restrict ovalue);

strutstruct itimerval {
    struct timerval it_interval; // periodic interval
    struct timeval it_value; // time to count down from
}
#+end_src

* DSOs
#+begin_src C
void* dlsym(void* handle, const char* sym_name);
#+end_src
- Load a specific symbol by name
  - Returns a void*
- Returns NULL if the symbol can't be found

#+begin_src C
void dlclose(void* handle);
#+end_src

- Close the DSO
  - Dose NOT necessarily remove all loaded symbols;

#+begin_src C
char* dlerror(void);
#+end_src

- Returns an error message based on the last dl function called

#+begin_src C
#include <stdio.h>

int funky_func(int i, int j, int k) {
    printf("%d %d %d\n", i, j, k);
    return i * j + k;
}

int (*myfunctorun)(int i, int j, int k) = funky_func;
#+end_src
gcc -shared -o libmylib.so <above.c>
gcc mymain.c -ldl

#+begin_src C
#include <dlfcn.h>
#include <stdio.h>

int main() {
    int (*funky)(int i, int j, int k);
    void* handle;

    handle = dlopen("./libmylib.so", RTLD_LAZY);
    if (!handle) {
        printf("%s\n", dlerror());
        return -1;
    }

    funky = dlsym(handle, "myfunctorun");
    if (!funky) {
        printf("%s\n", dlerror());
        return -1;
    }

    int ret = funky(10, 20, 30);

    printf("Funk returned %d\n", ret);

    printf("funky is at: %p\n", funky);

    dlclose(handle);
}
#+end_src

* Sockets
#+begin_src C
#include <sys/socket.h>
int socket(int af, int type, int protocol);
#+end_src

** af
- AF_UNIX
  - Essentially a named pipe
- AF_INET
- AF_INET6
** type
- sock_stream
- sock_dgram
** protocol
- 0, let the OS figure it out
  - If we choose stream it will choose tcp
  - If we choose dgram it will choose udp

#+begin_src C
#include <stdio.h>
#include <sys/socket.h>

int main() {
    int socket = socket(AF_UNIX, )
}
#+end_src

** Steps
*** Server
1. Create socket
2. Binding
   - TCP/UDP Port
   - UNIX filename
3. Set socket into listen mode
4. Accept
*** Client
1. Create a =socket()=
2. Make a connection =connect()=
3. close
