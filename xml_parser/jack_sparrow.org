#+title: Jack Sparrow

* Memory Layout
Jack Sparrow has 2 memory layout modes, automatic (default), and explict field ordering.

** Automatic Memory Layout
Automatic field ordering allows Jack Sparrow to reorder fields in the best possible order, while still maintaining field alignment. In a general sense we can think of this as ordering each field by its size, sorting from high to low, and then following the standard C-style layout.

This field ordering generally offers a 1.18x increase in efficiency (non-padding bytes/total bytes). In addition to the fields a user specifies in the schema, Jack Sparrow also needs to add an additional 1 bit per field to indicate if an optional field is present. This means that even if a users ensures their message is properly ordered to minimize padding, that benefit might be thrown away when Jack Sparrow adds =ciel(num_fields / 8)= bytes to the message.

** Explict Memory Layout
Explicit field ordering will adhere to typical C-style struct layouts, where fields are aligned based upon their native alignment size. Generally this means 4-byte fields must be placed at a memory address divisible by 4, or divisible by 8 for an 8-byte field. Characters (and other 1-byte) fields can be placed on any byte in memory.

This results in a more predictible memory model, at the cost of potentially wasted space due to needed padding.

* Type Definitions
#+begin_src C
typedef enum primitive_t {
    js_string,    // => 8
    js_i64,       // => 8
    js_u64,       // => 8
    js_i32,       // => 4
    js_u32,       // => 4
    js_i16,       // => 2
    js_u16,       // => 2
    js_i8,        // => 1
    js_u8,        // => 1
    js_char,      // => 1
    js_double,    // => 8
    js_float,     // => 4
    js_half,      // => 2
    js_timestamp, // => 8
    js_boolean    // => 1
} primitive_t;
#+end_src

** String
| offset in bytes | size    | ...                  | data         |
| 4 bytes         | 4 bytes | other message fields | `size` bytes |
** Integers
i = signed
u = unsigned
i64, where 64 means 64-bits wide
** Char
1 byte ASCII value
** Double
64-bit double precision floating point IEEE-754
** Float
32-bit single precision floating point IEEE-754
** Half
16-bit half precision floating point IEEE-754
** Timestamp
UNIX time_t 64-bit timestamp indicating seconds past Epoch (1970-01-01 00:00:00+0000 (UTC))
** Boolean
Pessimistic 1 byte per boolean, in reality these will get packed together with other booleans to form bit fields
- If a boolean is a required field it will add 0 space to the output, as its "optional" bit will be used to indicate its value


#+begin_src C
typedef struct reaction {
    string emoji;
    int32_t count;
} reaciton;

typedef struct chat_message {
    string author;
    time_t message_sent;
    int32_t likes;
    string body;
    reaction* reactions;
} chat_message;
#+end_src

#+begin_src js
class reaction {
    /**
    * UTF-8 encoded emoji
    * @type { string }
    */
    emoji;
    /**
    * Number of this reaction
    * @type { number }
    */
    count;
}

class chat_message {
    /**
    * Person who sent the message
    * @type { string }
    */
    author;
    /**
    * Timestamp of when the message was sent (milliseconds since 1970 epoch)
    * @type { number }
    */
    message_sent;
    /**
    * Number of likes
    * @type { number }
    */
    likes;
    /**
    * Body of message
    * @type { string }
    */
    body;
    /**
    * Array of reactions
    * @type { reaction[] }
    */
    reactions;
}
#+end_src

#+begin_src json
// Example Reaction
{
    emoji: '‚ò∫Ô∏è',
    count: 42
}

// Example Chat Message
{
    author: 'Bob',
    message_sent: 1725367913,
    likes: 4,
    body: 'This is a test message',
    reactions: [
        {
            emoji: '‚ò∫Ô∏è',
            count: 42
        },
        {
            emoji: 'Ô∏è‚Äçüî•',
            count: 3
        }
    ]
}
#+end_src

#+begin_src C
#include <time.h>
#include <stdio.h>

int main() {
    printf("%lu\n", time(0));
}
#+end_src

#+RESULTS:
: 1725367923
