#+HTML_LINK_HOME: index.html
#+HTML_LINK_UP: index.html
#+title: /Memory Allocator/
#+author: Jackson
#+date: 12/30/23
#+OPTIONS: toc:nil num:nil html-style:nil timestamp:nil
#+SETUPFILE: retro_dark.theme
* _Introduction_
We use memory allocators nearly every time we write software. They allow our programs to be dynamic and handle a wide variety of input, or user interactions. In languages like C the programmer interacts directly with the memory allocator through calling ~malloc()~ and ~free()~. Higher level languages extract away the need for the programmer to worry about memory management, usually through a garbage collector. But what does a memory allocator do? Hopefully we can figure that out through exploring one possible implementation.

* _Headers_
Here are all the headers I believe we will need to complete this project. Apologies if we don't end up using some of them, just try to cover my bases.
#+begin_src C
#include <assert.h>
#include <linux/limits.h>
#include <stdint.h>
#include <stdio.h>
#+end_src

* _Exploration_
You have hopefully heard a concept in programming called the "heap". Each time we dynamically allocate memory in our program it ends up on the heap. We know that the computer has all the memory available, so it must have given some of this memory to our heap. For now let's just imagine that asking for this memory in our program is super complicated, so we will use a statically allocated buffer that we manage ourselves.

Let's start off by laying our groundwork for this exploration.

#+begin_src C
#define HEAP_SIZE 1024

void* heap_base;

typedef struct {
  size_t size;
} heap_seg;
#+end_src

For now, we will set our heap to a fixed size of ~1024~ bytes, and we will use a global variable (☢ I know, I know ☢) to keep track of the base of our heap. Then we define a struct for each segment of our heap, which for now just holds a ~size_t~ to hold the size in bytes. We will later see how we can perform some cleaver transformations on this single number to store more information.

** _Initialization_

#+begin_src C
int heap_init(void* base) {
  if (!base) { return -1; }
  heap_base = base;

  *(heap_seg*)heap_base = (heap_seg){HEAP_SIZE - sizeof(heap_seg)};
  return 0;
}

#+end_src

From there we need to set our heap up so that users can begin to use it. In a real heap implementation this would be included in the first call to ~malloc~, but with our static version this won't be possible. Our only real setup here is to initialize our first heap segment, which will occupy the entire space by itself. We want to keep heap segments as large as possible so that we have a higher likelihood of being able to fit a requested allocation.

Once our heap is ready to go we can begin handing out pointers to different segments. Sounds easy right?

** _Allocation_

We will leave error handling out for right now to focus in on the core logic.

#+begin_src C
void *heap_malloc(size_t bytes) {
  heap_seg *ptr = heap_base;
  while (ptr < (heap_seg*)(heap_base + HEAP_SIZE)) {
    if ((ptr->size & 0x1) == 0 && ptr->size >= bytes + sizeof(heap_seg)) {
      // Store old capacity
      size_t old_cap = ptr->size;
      // Heap segment is free, and big enough
      ptr->size = sizeof(heap_seg) +
                      ((bytes + (sizeof(heap_seg) - 1)) / sizeof(heap_seg)) *
                          sizeof(heap_seg) |
                  0x1;
      void *user_block = (void *)(ptr + 1);
      if (old_cap > ptr->size) {
        heap_seg *next_block = ptr + ptr->size / sizeof(heap_seg);
        next_block->size = old_cap - (ptr->size ^ 0x1);
      }
      return user_block;
    }
    ptr += ptr->size / sizeof(heap_seg);
  }

  return NULL;
}
#+end_src

Yeah, it's a bit more going on that I would have assumed at first, but it won't be too hard to step through. Also note that we are currently covering what is called /first fit/ right now, where we find the first chunk able to fulfil the allocation request, we will cover a different allocation strategy later.

We first start at the base of our heap, and begin checking at each spot if it is both free, and large enough to handle the requested allocation. Once a chunk if found we note its original capacity, and change it's size to hold the requested amount of bytes. You may notice that we don't set the size to be equal to ~bytes~ as the user requested, instead we have to factor in a few more things.

The first portion of the size is the ~heap_seg~ struct itself, which in the current implementation is 8 bytes. The next section is the data, which needs to be aligned on 8 byte boundaries. We do this for efficient memory access, as a word on modern 64-bit systems is 8 bytes. To accomplish this we round up the requested size to the nearest multiple of 8, so 16 bytes stays at 16, and 17 bytes rounds up to 24.

Once we put this all together we set the least significant bit to 1. This final bit allows us to keep track of if the heap segment is in use. We are able to do this because each size will be a multiple of 8, meaning that its lower 3 bits will always be 0. We are currently using 1 of the 3 bits, so we can potentially even store more flags if needed.

There we go, we have now produced a heap segment that can be returned to the user. We note the position where they are allowed to begin writing, which we will return at the end of our function. The last step is to see if we need to segment the heap. If the section we allocated is less than the old capacity e get a pointer to the start of the next heap segment, and then set its size to the remaining space in the heap.

[[file:heap_segmenting.png]]

That's how we hand out segments of our heap to users! If we don't find a suitable segment we advance to the next segment and start over again.

#+begin_src  C
int main() {
  uint8_t heap[HEAP_SIZE];
  heap_init(heap);

  int *block = heap_malloc(4);
  assert(block != NULL);
  *block = 4;

  int *num = heap_malloc(4);
  assert(num != NULL);
  *num = 7;

  printf("Num holds: %d\n", *num);
  printf("Block holds: %d\n", *block);
}
#+end_src

#+begin_example
Num holds: 7
Block holds: 4
#+end_example

It was fairly easy to hand out memory, so how does the user give that memory back?

** _Freeing_
In our most basic implementation "freeing" memory will be nothing more than setting its least significant bit back to 0.

#+begin_src C
void heap_free(void* block) {
  if (!block) { return; }
  heap_seg *header = (heap_seg*)block - 1;
  header->size ^= 1;
}
#+end_src

But we may run into a bit of a problem here. What happens if a user allocated a many 8 byte segments at the start of their program, and then frees them all back once their program gets under way. Then they need to allocate larger segments of memory. With our current free function we would have to skip over all of these tiny segments till we found one large chunk to hand back to the user. What if all of those small segments added together would have been enough to handle their allocation.

This is where we have to rejoin our heap segments to ensure that we do not "fragment" the heap. Surprisingly this is also fairly easy to accomplish once you can visualize the possible states our heap may be in.

When a user requests to free a block there are only 3 possible states that it may be in.

[[file:freeing_patterns.png]]
1. The segment above or below is free, in which case we need to combine our segment with the adjacent free segment.
2. Both segments above and below are free, in which case we need to combine all 3 into a larger block.
3. The segments above and below are still in use, in which case we simply set the LSB to 0.

If we follow this behavior on every free call we ensure that every block in our heap will fall into 1 of these 3 states. The implementation here is just to check the block above and below the current block, then apply any needed transformations.

#+begin_src C
void heap_free(void* block) {
  if (!block) { return; }
  heap_seg *header = (heap_seg*)block - 1;
  // Get prev/next pointers
  heap_seg *prev = header - header->size / sizeof(heap_seg);
  heap_seg *next = header + header->size / sizeof(heap_seg);
  if (prev > (heap_seg*)heap_base && !(prev->size & 1)) {
    prev->size += header->size;
    header = prev;
  }
  if (next < heap_base + HEAP_SIZE && !(next->size & 1)) {
    header->size += next->size;
  }

  header->size ^= 1;
}
#+end_src

Expanding on the previous function we obtain pointers to the blocks directly before and after the current block. Then we can check each block, and see if it needs to be merged. If the previous block is free we update it's size to include the current block, and update our ~header~ pointer to this previous block. Then the next block is checked, and we update our size accordingly. The last step is to zero out the "in use" bit of our header.

Note that we do not need to explicitly do anything with the freed memory. By updating the size of the nodes around it, we ensure that it will be skipped over when searching for the closest free block. Also, by updating our ~header~ pointer we ensure that the following logic will work for any of the 3 possible states of our segment.

With our allocation and freeing functions complete, that is pretty much it for the most basic of heap allocators.

** _Example Usage_
#+begin_src C
int main() {
  uint8_t heap[HEAP_SIZE];
  heap_init(heap);

  int *block = heap_malloc(4);
  ,*block = 4;

  int *num = heap_malloc(4);
  ,*num = 7;

  int *test = heap_malloc(4);
  ,*test = 66;

  printf("Address of block: %p\n", block);
  printf("Address of num: %p\n", num);
  printf("Address of test: %p\n", test);

  printf("Size of block: %d\n", ((heap_seg*)block-1)->size ^ 0x1);
  printf("Size of num: %d\n", ((heap_seg*)num-1)->size ^ 0x1);
  printf("Size of test: %d\n", ((heap_seg*)test-1)->size ^ 0x1);

  heap_free(num);
  heap_free(test);

  num = heap_malloc(32);
  ,*num = 1;

  printf("Address of block: %p\n", block);
  printf("Address of num: %p\n", num);
  printf("Size of block: %d\n", ((heap_seg*)block-1)->size ^ 0x1);
  printf("Size of num: %d\n", ((heap_seg*)num-1)->size ^ 0x1);
}
#+end_src

#+begin_example
Address of block: 0x7ffcef5b94a8  <-- Heap Base
Address of num: 0x7ffcef5b94b8    <-- Heap Base + 16
Address of test: 0x7ffcef5b94c8   <-- Heap Base + 32

Size of block: 16
Size of num: 16
Size of test: 16

Address of block: 0x7ffcef5b94a8  <-- Heap Base
Address of num: 0x7ffcef5b94b8    <-- Heap Base + 16 (same address as above)

Size of block: 16
Size of num: 40   <-- 32 byte allocation + 8 byte header
#+end_example

** _Takeaways_
Implementing a naive memory allocator is fairly easy. It won't be the fastest one in the world, nor the most secure. Either way, this small exploration shows us the basics of how we can hand out chunks of memory to a user, and allow them to be freed back to us.

The /first fit/ algorithm that we chose to implement above is one of the quicker ways to allocate memory (we can also add a global variable that points to the first free block, to further increase speed). While speed is an important factor when it comes to allocating memory, sometimes the user might wish to be more space efficient as opposed to time efficient.

[[file:first_fit.png]]

Instead of finding the first available spot we can find the /best fit/ segment which is the smallest segment large enough to handle the requested allocation. One of the major advantages of this algorithm is that it avoids splitting large heap segments, which we should try to preserve for large allocations.

[[file:best_fit.png]]

The biggest problem with splitting large heap segments is that we fragment our heap. Our next large allocation may not be able to find a contiguous segment to hold it, thus requiring our allocator to go out to the operating system and request more memory. For this reason, our next iteration will explore this algorithm.

Our current implementation also relies on a statically allocated buffer, meaning once we fill this up we won't be able to hand out more memory. Let's see how we can make this behavior more dynamic by requested more memory from the operating system.

* _sbrk()_
While the exact details of how a program is laid out in memory is not required to understand this portion, it will be very helpful.

Any of the programs that you choose run on your computer are running in [[https://en.wikipedia.org/wiki/User_space_and_kernel_space][/user-space/]]. The CPU scheduling that an operating system does won't apply here, as we are more concerned with the memory layout of our program. Essentially, when our program is running the operating system provides it a virtual memory space, which our program sees as one contiguous memory space that it has control over.

A program like Firefox or OBS does not need to be concerned with the other programs running on the computer. Under the hood each program may be spread out all over physical memory, or intertwined together with other programs. For our /user-space/ programs to work the operating system "lies" to them, providing a single contiguous section of memory. Our program then runs as if it is the only program on the computer.

When are program is run it is loaded into memory with a layout as depicted below.

[[file:memory_layout.png]]

I have been referring to our memory allocator as a "heap allocator", where the heap refers to the "heap" in memory. Just like our buffer of ~1024~ bytes in our original implementation the heap is a large contiguous section of memory. Yet unlike our ~1024~ byte buffer the heap can grow and shrink as needed. This is accomplished with the system call ~sbrk()~.




#  LocalWords:  sbrk size_t malloc
