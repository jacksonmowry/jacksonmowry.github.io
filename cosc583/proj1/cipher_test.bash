#!/usr/bin/env bash

source util.bash
source cipher.bash
source testing.bash

declare -i result=0

state_array=(0xd4 0xe0 0xb8 0x1e 0xbf 0xb4 0x41 0x27 0x5d 0x52 0x11 0x98 0x30 0xae 0xf1 0xe5)
MixColumns state_array

expected=(0x04 0xe0 0x48 0x28 0x66 0xcb 0xf8 0x06 0x81 0x19 0xd3 0x26 0xe5 0x9a 0x7a 0x4c)

expect_equal_int_array expected state_array

############
# SubBytes #
############
state=({0..15})
copy=({0..15})
expected=("${sbox[@]:0:16}")

SubBytes state
expect_equal_int_array expected state

state=(0x19,0xa0,0x9a,0xe9
    0x3d,0xf4,0xc6,0xf8
    0xe3,0xe2,0x8d,0x48
    0xbe,0x2b,0x2a,0x08)
expected=(0xd4,0xe0,0xb8,0x1e
    0x27,0xbf,0xb4,0x41
    0x11,0x98,0x5d,0x52
    0xae,0xf1,0xe5,0x30)

SubBytes state
expect_equal_int_array expected state

###########
# subWord #
###########

#subWord(0x00102030) == 0x63cab704
subWord 0x00102030 result
expect_equal_int 0x63cab704 $((result))

#subWord(0x40506070) == 0x0953d051
subWord 0x40506070 result
expect_equal_int 0x0953d051 $((result))

#subWord(0x8090a0b0) == 0xcd60e0e7
subWord 0x8090a0b0 result
expect_equal_int 0xcd60e0e7 $((result))

#subWord(0xc0d0e0f0) == 0xba70e18c
subWord 0xc0d0e0f0 result
expect_equal_int 0xba70e18c $((result))

#############
# ShiftRows #
#############
state=(0xd4 0xe0 0xb8 0x1e
    0x27 0xbf 0xb4 0x41
    0x11 0x98 0x5d 0x52
    0xae 0xf1 0xe5 0x30)
expected=(0xd4 0xe0 0xb8 0x1e
    0xbf 0xb4 0x41 0x27
    0x5d 0x52 0x11 0x98
    0x30 0xae 0xf1 0xe5)

ShiftRows state
expect_equal_int_array expected state

###########
# rotWord #
###########
# rotWord(0x09cf4f3c) == 0xcf4f3c09
rotWord 0x09cf4f3c result
expect_equal_int 0xcf4f3c09 $((result))

# rotWord(0x2a6c7605) == 0x6c76052a
rotWord 0x2a6c7605 result
expect_equal_int 0x6c76052a $((result))

################
# KeyExpansion #
################
key=(0x2b 0x7e 0x15 0x16 0x28 0xae 0xd2 0xa6 0xab 0xf7 0x15 0x88 0x09 0xcf 0x4f 0x3c)
w=({1..44})
expected_w=(0x2b7e1516 0x28aed2a6 0xabf71588 0x09cf4f3c 0xa0fafe17 0x88542cb1 0x23a33939 0x2a6c7605 0xf2c295f2 0x7a96b943 0x5935807a 0x7359f67f 0x3d80477d 0x4716fe3e 0x1e237e44 0x6d7a883b 0xef44a541 0xa8525b7f 0xb671253b 0xdb0bad00 0xd4d1c6f8 0x7c839d87 0xcaf2b8bc 0x11f915bc 0x6d88a37a 0x110b3efd 0xdbf98641 0xca0093fd 0x4e54f70e 0x5f5fc9f3 0x84a64fb2 0x4ea6dc4f 0xead27321 0xb58dbad2 0x312bf560 0x7f8d292f 0xac7766f3 0x19fadc21 0x28d12941 0x575c006e 0xd014f9a8 0xc9ee2589 0xe13f0cc8 0xb6630ca6)
KeyExpansion key w 4
expect_equal_int_array expected_w w

###############
# AddRoundKey #
###############
state=(0x04 0xe0 0x48 0x28
    0x66 0xcb 0xf8 0x06
    0x81 0x19 0xd3 0x26
    0xe5 0x9a 0x7a 0x4c)
expected=(0xa4 0x68 0x6b 0x02
    0x9c 0x9f 0x5b 0x6a
    0x7f 0x35 0xea 0x50
    0xf2 0x2b 0x43 0x49)

AddRoundKey state w 1
expect_equal_int_array expected state

##########
# Cipher #
##########
in=(0x32 0x43 0xf6 0xa8 0x88 0x5a 0x30 0x8d
    0x31 0x31 0x98 0xa2 0xe0 0x37 0x07 0x34)
out=(0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00)
result=(0x39 0x25 0x84 0x1d 0x02 0xdc 0x09 0xfb
    0xdc 0x11 0x85 0x97 0x19 0x6a 0x0b 0x32)
Cipher in out w 4

expect_equal_int_array result out

echo "All tests passed"
